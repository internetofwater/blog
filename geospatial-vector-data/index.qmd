---
title: "geospatial-vector-data"
author: "Kyle Onda"
format: html
---

# Geospatial Vector Data

In this blog, I am going to describe some practices that the Internet of Water recommends when it comes to sharing geospatial vector data. But first, what is geospatial vector data, and why is it important as a component of water data?

Geospatial vector data represents particular features (things with locations in GIS speak) on Earth, and attributes about them. In general, vector data uses combinations of X-Y coordinates to describe the location, which might be a discrete **point**, **line**, **polygon**, or collections of any of them. Vector data is important for water science and management, because it is often at the foundation of how we generate, analyze, and communicate water data.

For example, to analyze and describe a region's water quality, we may need to represent a watershed as a polygon, within which are stream segments represented as lines, near which are water quality sampling stations represented as points. All of these features in turn have various attributes that may include identifiers, names, and summary statistics regarding observed and modeled water quality metrics. The interactive figure below is composed of just such a combination of geospatial vector data around Morgan Creek near Chapel Hill, NC.

```{r,  echo=FALSE, message=FALSE, warning=FALSE}
library(sf)
library(mapview)
library(dplyr)

nldiURLs <- list(site_data = "https://labs.waterdata.usgs.gov/api/nldi/linked-data/nwissite/USGS-02097517",
             basin_boundary = "https://labs.waterdata.usgs.gov/api/nldi/linked-data/nwissite/USGS-02097517/basin",
             UT = "https://labs.waterdata.usgs.gov/api/nldi/linked-data/nwissite/USGS-02097517/navigation/UT/flowlines?distance=999",
             UM = "https://labs.waterdata.usgs.gov/api/nldi/linked-data/nwissite/USGS-02097517/navigation/UM/flowlines?distance=999",
             DM = "https://labs.waterdata.usgs.gov/api/nldi/linked-data/nwissite/USGS-02097517/navigation/DM/flowlines?distance=999",
             UTwqp = "https://labs.waterdata.usgs.gov/api/nldi/linked-data/nwissite/USGS-02097517/navigation/UT/wqp?distance=999",
             DMwqp = "https://labs.waterdata.usgs.gov/api/nldi/linked-data/nwissite/USGS-02097517/navigation/DM/wqp?distance=999")

nldi_data <- list()

for(n in names(nldiURLs)) {
  nldi_data[n] <- list(sf::read_sf(nldiURLs[n][[1]]))
 # print(paste(n, "is of class", class(nldi_data[[n]]), "and has", nrow(nldi_data[[n]]), "features"))
}

map <- mapview::mapview(nldi_data$basin_boundary, layer.name = "basin polygon", alpha.region=0, color="red", lwd=3, col.region="red")
map <- map + mapview::mapview(nldi_data$UT |> mutate(nhdplus_comid="comid"), color="blue", legend=TRUE, layer.name = "stream flowlines")
map <- map + mapview::mapview(nldi_data$UTwqp, color="black", col.regions="green", legend=TRUE, layer.name = "Water Quality Monitoring Locations")

map

```

It is important to be able to share this data in ways that are easy for scientists and water professionals to analyze and for developers to work with to make decision support tools and public communication materials. This is where **Data Standards** and **API Standards** come into play.

# Geospatial Data Standards

### Why?

Geospatial vector data standards are rules regarding the structure and format of data. They address concepts like how point, lines, and polygons can be expressed using coordinates (and coordinate reference systems), and how associated attributes for a given geometry are allowed to be structured and named. Data files that comply with a given data standard can then be used by the same software to be viewed, analyzed, edited, or written, which is great for accessibility! It means that your data can be easily used by others that you share it with, as long as they have software that can work with the standard.

The Internet of Water recommends that water-related data should be shared using open (as in well-documented and with a license that allows anyone to use the standard without paying someone) and widely-supported standards so that more people can use the data. There are [many geospatial vector data standards](https://gdal.org/drivers/vector/index.html), but not all are open or widely adopted. Thus, it is also generally considered good practice to provide the same data in [multiple formats](https://www.w3.org/TR/dwbp/#MultipleFormats) where feasible to maximize accessibility.

### OK, so which standards?

Standards are constantly under development, and moreover, different data standards are suited to different uses. Thus, we reccomend different standards for different anticipated uses.

#### Exploration and anlaysis of an entire dataset

Many analysts wish to download an entire dataset and use their own tools and skills to analyze the data. This requires the entire dataset to be downloadable.

-   geopackage for bulk downloads (new NHDHR examples)

-   geojson for web viewing (GML for more complicated geometries, or FGB for very large. geoparquet for very very large)

-   shapefile (should not be the only way it is shared, but useful since it is the most common format)

-   ESRI file geodatabase (should not be the only way it is hsared, but useful to support those using ESRI tools)

### How to use?

-   ESRI tools: import geopackage, shapefile, fgdb natively.

-   Open source: QGIS can import from all natively, and can write to all by

### How to implement?

-   R packages like sf can write to most of these using the write_sf() function

-   Python similar with

-   ArcGIS Online/Enterprise portal can make geopackage, shapefile, geojson, and fgdb downloads from hosted feature layers

# Geospatial API Standards

### Why?

So software like web maps and automated analysis scripts can select the data they need on the fly or update only new data as necessary, without having to download the entirety of what might be a massive dataset every time it is needed.

### Which ones?

### How to use?

### How to implement

-   ArcGIS Online/ Enterprise Portal supports publishing from hosted layers, which can be uploaded from shapefiles, geojson, fgdb, or directly from linked ArcGIS Pro instances

    -   OGC-API Features

    -   OGC WFS

    -   ESRI FeatureServer/MapServer

-   Geoserver supports OGC-API Features and OGC WFS

-   pygeoapi supports OGC-API Features

### 

```{r}
3+3
```
